{% extends 'layout/base.twig' %}
{% import 'macros/helpers.twig' as helpers %}

{% block title %}
- Compare - {{ base_run.meta.simple_url }}
{% endblock %}

{% block content %}
<h1>Compare runs for {{ base_run.meta.simple_url }}</h1>

{% if not base_run %}
<div class="row-fluid row-spaced">
    <p class="alert alert-error">
        You must select a base run to start a comparison.
    </p>
</div>
{% else %}
    <div class="row-fluid row-spaced">
        <span class="badge compare-base">
            base: {{ base_run.meta.simple_url }} - {{ base_run.date|date(date_format) }}
        </span>
        <span class="compare-elipsis">&hellip;</span>

        {% if head_run %}
        <span class="badge compare-head">
            new: {{ _run.meta.simple_url }} - {{ head_run.date|date(date_format) }}
        </span>
        <a class="btn btn-mini" href="{{ url('run.compare', {'base': base_run.id|trim }) }}">change</a>
        <a class="btn btn-mini" href="{{ url('run.compare', {'base': head_run.id|trim, 'head': base_run.id|trim }) }}">reverse</a>
        {% else %}
        <span class="badge">Choose a run below</span>
        {% endif %}
    </div>

    {% if candidates|length %}
    <div class="row-fluid row-spaced">
        <h3>Other runs with {{ base_run.meta.simple_url }}</h3>
        {% include 'runs/paginated-list.twig' with {runs: candidates.results, show_compare_link: true} %}
        {{ helpers.pagination('run.compare', pagination, url_params) }}
    </div>
    {% endif %}

    {% if comparison %}
        <div class="row-fluid row-spaced">
        {% include 'runs/compare-details.twig' %}
        </div>
    {% endif %}

{% endif %}

{% endblock %}


{% block jsfoot %}
    <script type="text/javascript">
        $(document).ready(function () {

            $("a[data-toggle=popover]")
                .popover()
                .click(function(e) {
                    e.preventDefault()
                });

            var gear = $('#customize-table');
            var popover = $('#metric-popover');
            var ok = popover.find('.btn.btn-primary');
            var apply = popover.find('.btn.btn-apply');
            var resetFilters = popover.find('.btn.btn-danger');

            var selectedMetricField = $('select[name=metric]');
            var thresholdField = $('input[name=threshold]');
            var operator = $('select[name=operator]');
            var rows = $('#function-calls tbody tr');

            gear.on('click', function(e) {
                popover.toggle();
                var width = gear.outerWidth();
                var height = popover.height();
                var buttonPosition = gear.offset();
                popover.css({
                    right: width + 20,
                    top: 10+buttonPosition.top-(height/2)
                });
                return false;
            });

            ok.on('click',handleClick);
            apply.on('click',handleClick);
            resetFilters.on('click', function (){
                popover.hide();
                rows.each(function (i, el) {
                    $(el).show();
                });
            });


            function handleClick(e) {
                var selectedMetric = selectedMetricField.val();
                var selectedThreshold = thresholdField.val();
                popover.hide();

                var applyMode = $(e.target).hasClass('btn-apply');
                rows.each(function (i, el) {
                    var row = $(el);
                    var rowRawValue = row.find('.value-'+selectedMetric).text();

                    var rowValue = parseInt(rowRawValue.replace(/[^0-9\-]/g, ''), 10);
                    var fieldShouldBeVisible = false;

                    switch(operator.val()) {
                        case 'lt':
                            fieldShouldBeVisible = rowValue < selectedThreshold;
                            break;
                        case 'gt':
                            fieldShouldBeVisible = rowValue > selectedThreshold;
                            break;
                        case 'le':
                            fieldShouldBeVisible = rowValue <= selectedThreshold;
                            break;
                        case 'ge':
                            fieldShouldBeVisible = rowValue >= selectedThreshold;
                            break;
                        case 'eq':
                            fieldShouldBeVisible = rowValue == selectedThreshold;
                            break;
                        case 'ne':
                            fieldShouldBeVisible = rowValue != selectedThreshold;
                            break;
                    }
                    if (fieldShouldBeVisible) {
                        if (applyMode === false) {
                            row.show();
                        }
                    } else {
                        row.hide();
                    }
                });

                return false;
            }

            var wallTime = {{ wall_time|json_encode|raw }};
            Xhgui.columnchart('#wall-time-chart', wallTime, {
                width: 350,
                height: 300,
                postfix: ' \u00b5s'
            });
            var memoryData = {{ memory|json_encode|raw }};
            Xhgui.columnchart('#memory-usage-chart', memoryData, {
                width: 350,
                height: 300,
                postfix: ' bytes'
            });

            $('#function-filter').on('keyup', function(e) {
                var value = $(this).val();
                rows.each(function (i, el) {
                    var row = $(el);
                    var name = row.find('.text a').text();
                    if (name.indexOf(value) === -1) {
                        row.hide();
                    } else {
                        row.show();
                    }
                });
            });


        });

        function filterFunctons(){
            var rows = $('#function-calls tbody tr');
            var regexes = [];
            for(var i = 0, len = functionFilter.length; i < len; i++) {
                regexes.push(new RegExp(functionFilter[i]));
            }
            rows.each(function (i, el) {
                var row = $(el);
                var name = row.find('.text a').text();

                for(var n = 0, len = regexes.length; n < len; n++) {
                    if(regexes[n].test(name)) {
                        row.remove();
                    }
                }
            });
        }
    </script>

{% endblock %}
